function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var styled = _interopDefault(require('styled-components'));

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

var _templateObject, _templateObject2, _templateObject3;
var MouseContext = React.createContext({
  cursorType: '',
  cursorChangeHandler: function cursorChangeHandler() {}
});
var MouseContextProvider = function MouseContextProvider(_ref) {
  var children = _ref.children;

  var _React$useState = React.useState(''),
      cursorType = _React$useState[0],
      setCursorType = _React$useState[1];

  var cursorChangeHandler = function cursorChangeHandler(cursorType) {
    setCursorType(cursorType);
  };

  return React.createElement(MouseContext.Provider, {
    value: {
      cursorType: cursorType,
      cursorChangeHandler: cursorChangeHandler
    }
  }, children);
};

var useMousePosition = function useMousePosition() {
  var _React$useState2 = React.useState({
    x: 0,
    y: 0
  }),
      mousePosition = _React$useState2[0],
      setMousePosition = _React$useState2[1];

  React.useEffect(function () {
    var mouseMoveHandler = function mouseMoveHandler(event) {
      var clientX = event.clientX,
          clientY = event.clientY;
      setMousePosition({
        x: clientX,
        y: clientY
      });
    };

    document.addEventListener('mousemove', mouseMoveHandler);
    return function () {
      document.removeEventListener('mousemove', mouseMoveHandler);
    };
  }, []);
  return mousePosition;
};

var Ring = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 50px;\n  height: 50px;\n  border: 2px solid #000000;\n  border-radius: 100%;\n  transform: translate(-50%, -50%);\n  transition: 0.2s ease-out;\n  z-index: 999;\n  pointer-events: none;\n"])));
var Dot = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose(["\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  width: 10px;\n  height: 10px;\n  background-color: #000000;\n  border-radius: 100%;\n  transform: translate(-50%, -50%);\n  z-index: 999;\n  pointer-events: none;\n"])));
var CursorContainer = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose(["\n  .hovered {\n    width: ", "px !important;\n    height: ", "px !important;\n  }\n"])), function (_ref2) {
  var ringSize = _ref2.ringSize;
  return ringSize;
}, function (_ref3) {
  var ringSize = _ref3.ringSize;
  return ringSize;
});
var Cursor = function Cursor(_ref4) {
  var color = _ref4.color,
      _ref4$showRing = _ref4.showRing,
      showRing = _ref4$showRing === void 0 ? true : _ref4$showRing,
      _ref4$ringSize = _ref4.ringSize,
      ringSize = _ref4$ringSize === void 0 ? 50 : _ref4$ringSize,
      ringBorder = _ref4.ringBorder,
      cursorSize = _ref4.cursorSize;

  var _useMousePosition = useMousePosition(),
      x = _useMousePosition.x,
      y = _useMousePosition.y;

  var _React$useContext = React.useContext(MouseContext),
      cursorType = _React$useContext.cursorType,
      cursorChangeHandler = _React$useContext.cursorChangeHandler;

  React.useEffect(function () {
    document.addEventListener('mousedown', function () {
      return cursorChangeHandler('hovered');
    });
    document.addEventListener('mouseup', function () {
      return cursorChangeHandler('');
    });
    var links = Array.from(document.getElementsByTagName('a'));
    links.forEach(function (element) {
      element.addEventListener('mouseover', function () {
        return cursorChangeHandler('hovered');
      });
      element.addEventListener('mouseout', function () {
        return cursorChangeHandler('');
      });
    });
  });
  return React.createElement(CursorContainer, {
    ringSize: ringSize + 30
  }, showRing && React.createElement(Ring, {
    className: 'ring ' + cursorType,
    style: {
      left: x + "px",
      top: y + "px",
      borderColor: color,
      borderWidth: ringBorder,
      height: ringSize,
      width: ringSize
    }
  }), React.createElement(Dot, {
    className: 'dot',
    style: {
      left: x + "px",
      top: y + "px",
      background: color,
      height: cursorSize,
      width: cursorSize
    }
  }));
};

exports.Cursor = Cursor;
exports.MouseContext = MouseContext;
exports.MouseContextProvider = MouseContextProvider;
//# sourceMappingURL=index.js.map
